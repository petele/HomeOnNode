#!/usr/bin/env node
'use strict';

/* eslint require-jsdoc: "off" */

const util = require('util');
const path = require('path');
const chalk = require('chalk');
const glob = require('globule');
const _ = require('underscore');
const commander = require('commander');
const hseLib = require('./lib/HueSceneEditor');
const Keys = require('../app/Keys.js').keys;

const UTIL_OPTS_PRETTY = {
  colors: true,
  compact: true,
  depth: 6,
  maxArrayLength: 80,
};

commander
  .version('0.0.1')
  .option('-a, --address <address>', 'Address to use')
  .option('-k, --key <key>', 'Hue Key')
  .option('-i, --insecure', 'Insecure, use HTTP only')
  .option('-v, --verbose', 'Verbose output')
  .option('-t, --trial', 'Trial only, don\'t make requests.');

function initHSE() {
  const opts = {
    key: commander.key || Keys.hueBridge.key,
    address: commander.address || '192.168.86.206',
    verbose: commander.verbose,
    secure: !commander.insecure,
    trial: commander.trial,
  };
  hseLib.init(opts);
}

function getMotionSensor(sensors) {
  return _.filter(sensors, (sensor, key) => {
    sensor.$key = key;
    if (sensor.modelid.startsWith('SML001')) {
      return true;
    }
    return false;
  });
}

function getResourceLinkForSensorID(resourceLinks, sensorID) {
  let result;
  const sensorString = `/sensors/${sensorID}`;
  Object.keys(resourceLinks).forEach((key) => {
    const rLink = resourceLinks[key];
    if (rLink.links.includes(sensorString)) {
      result = rLink;
    }
  });
  return result;
}

function getSensor(sensors, sensorID) {
  const sensor = sensors[sensorID];
  if (!sensor) {
    return null;
  }
  sensor.$key = sensorID;
  return sensor;
}

function getRule(rules, ruleID) {
  const rule = rules[ruleID];
  if (!rule) {
    return null;
  }
  rule.$key = ruleID;
  return rule;
}

function getGroup(groups, groupID) {
  const group = groups[groupID];
  if (!group) {
    return null;
  }
  group.$key = groupID;
  return group;
}

function getSchedule(schedules, scheduleID) {
  const schedule = schedules[scheduleID];
  if (!schedule) {
    return null;
  }
  schedule.$key = scheduleID;
  return schedule;
}

function getScene(scenes, sceneID) {
  const scene = scenes[sceneID];
  if (!scene) {
    return null;
  }
  scene.$key = sceneID;
  return scene;
}

function testRules(conditions, rules) {
  if (conditions.length !== rules.length) {
    return false;
  }
  let result = true;
  rules.forEach((rule) => {
    if (!_.findWhere(conditions, rule)) {
      result = false;
    }
  });
  return result;
}

function isRulePress(rule, sensorID, cycleSensorID, butStatOp, butStatVal) {
  const buttonEvent = {
    address: `/sensors/${sensorID}/state/buttonevent`,
    operator: 'eq',
    value: '1000',
  };
  const buttonStatus = {
    address: `/sensors/${cycleSensorID}/state/status`,
    operator: butStatOp,
    value: butStatVal,
  }
  const lastUpdated = {
    address: `/sensors/${sensorID}/state/lastupdated`,
    operator: 'dx',
  };
  const rules = [buttonEvent, buttonStatus, lastUpdated];
  return testRules(rule.conditions, rules);
}

function isRuleSimplePress(rule, sensorID, buttonID) {
  const buttonEvent = {
    address: `/sensors/${sensorID}/state/buttonevent`,
    operator: 'eq',
    value: buttonID,
  };
  const lastUpdated = {
    address: `/sensors/${sensorID}/state/lastupdated`,
    operator: 'dx',
  };
  const rules = [buttonEvent, lastUpdated];
  return testRules(rule.conditions, rules);
}

function isRuleResetTimer(rule, sensorID) {
  const lastUpdated = {
    address: `/sensors/${sensorID}/state/lastupdated`,
    operator: 'dx',
  };
  const rules = [lastUpdated];
  return testRules(rule.conditions, rules);
}

function getID(path) {
  const reLink = path.match(/^\/(.*?)\/(.*)/m);
  if (reLink[2]) {
    return reLink[2];
  }
  return null;
}

commander
  .command('get <dimmerID>')
  .description('Lists all of the current scenes')
  .action((sensorID) => {
    initHSE();
    const hueObj = hseLib.readJSONFile('/Users/petele/Desktop/petele-at-home-hue-export.json');
    const motionSensorObj = {
      uniqueID: null,
      sensors: {
        temperature: null,
        motion: null,
        light: null,
        other: {},
      },
      groups: {},
      rules: {},
      scenes: {},
      schedules: {},
      resourceLinks: {},
    };

    const motionSensor = getSensor(hueObj.sensors, sensorID);
    if (!motionSensor) {
      console.log('motionSensor not found');
      return;
    }
    if (!motionSensor.modelid.startsWith('SML001')) {
      console.log('not a motion sensor');
      return;
    }

    // const sensorKey = motionSensor.uniqueid.substr(0, 20);
    motionSensorObj.uniqueID = motionSensor.uniqueid.substr(0, 20);
    const sensors = getMotionSensor(hueObj.sensors);
    sensors.forEach((m) => {
      if (!m.uniqueid.startsWith(motionSensorObj.uniqueID)) {
        return;
      }
      if (m.type === 'ZLLTemperature') {
        motionSensorObj.sensors.temperature = m;
      } else if (m.type === 'ZLLPresence') {
        motionSensorObj.sensors.motion = m;
        sensorID = m.$key;
      } else if (m.type === 'ZLLLightLevel') {
        motionSensorObj.sensors.light = m;
      }
    });

    const rLinks = getResourceLinkForSensorID(hueObj.resourcelinks, sensorID);
    motionSensorObj.resourceLinks = rLinks;

    _.filter(rLinks.links, (val) => val.startsWith('/sensors/'))
      .forEach((sensorPath) => {
        const sensorID = getID(sensorPath);
        const sensor = getSensor(hueObj.sensors, sensorID);
        if (sensor.modelid === 'SML001') {
          return;
        }
        motionSensorObj.sensors.other[sensorID] = sensor;
      });

    _.filter(rLinks.links, (val) => val.startsWith('/rules/'))
      .forEach((rulePath) => {
        const ruleID = getID(rulePath);
        const rule = getRule(hueObj.rules, ruleID);
        motionSensorObj.rules[ruleID] = rule;
      });


    _.filter(rLinks.links, (val) => val.startsWith('/schedules/'))
      .forEach((schedulePath) => {
        const scheduleID = getID(schedulePath);
        motionSensorObj.schedules = getSchedule(hueObj.schedules, scheduleID);
      });

    _.filter(rLinks.links, (val) => val.startsWith('/scenes/'))
      .forEach((scenePath) => {
        const sceneID = getID(scenePath);
        const scene = getScene(hueObj.scenes, sceneID);
        motionSensorObj.scenes[scene.$key] = scene;
      });

    _.filter(rLinks.links, (val) => val.startsWith('/groups/'))
      .forEach((groupPath) => {
        const groupID = getID(groupPath);
        const group = getGroup(hueObj.groups, groupID);
        motionSensorObj.groups[group.$key] = group;
      });

    console.log(util.inspect(motionSensorObj, UTIL_OPTS_PRETTY));
    // printDimmerInfo(dimmerObj)

  });

function printDimmerInfo(dimmerObj) {
  console.log('Hue Dimmer Info:', chalk.cyan(dimmerObj.sensor.name));
  console.log(' ', `Sensor ID: ${chalk.cyan(dimmerObj.sensor.$key)}`);
  console.log(' ', `Battery: ${chalk.cyan(dimmerObj.sensor.config.battery)}%`);
  console.log(' ', `SW Version: ${chalk.cyan(dimmerObj.sensor.swversion)}`);
  console.log(' ', `Last Used: ${chalk.cyan(dimmerObj.sensor.state.lastupdated)}`);
  console.log(' ', `Cycle Sensor ID: ${chalk.cyan(dimmerObj.sceneCycle.sensor.$key)}`);
  _.each(dimmerObj.groups, (val, key) => {
    console.log(' ', 'Room:', chalk.cyan(val.name), `(${chalk.cyan(key)})`);
  });
  console.log(' ', chalk.bold('Rules'));
  _.each(dimmerObj.rules, (val, key) => {
    console.log('  ', `${chalk.green(key)}: ${val.name} (${chalk.cyan(val.$key)})`);
  });
}

commander
  .command('list')
  .description('Lists all of the current scenes')
  .action(() => {
    initHSE();
    const hueObj = hseLib.readJSONFile('/Users/petele/Desktop/petele-at-home-hue-export.json')
    const sensors = getMotionSensor(hueObj.sensors);
    Object.keys(sensors).forEach((key) => {
      const sensor = sensors[key];
      if (sensor.type === 'ZLLPresence') {
        console.log(sensor.$key.padStart(2), chalk.cyan(sensor.name));
      }
    });
  });

commander.parse(process.argv);
if (commander.args.length === 0) {
  commander.help();
}
