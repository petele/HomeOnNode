#!/usr/bin/env node
'use strict';

/* eslint require-jsdoc: "off" */

const util = require('util');
const path = require('path');
const chalk = require('chalk');
const glob = require('globule');
const commander = require('commander');
const hseLib = require('./lib/HueSceneEditor');
const Keys = require('../app/Keys.js').keys;

console.log(chalk.bold('HomeOnNode Hue Scene Helper'));

const RE_ROOM_ID = /_r(\d\d)/;
const RE_SCENE_TYPE = /_d(\d\d)/;
const DELAY_BETWEEN_EXTRA = 60;
const DELAY_BETWEEN_REQUESTS = 350;
const DELAY_BETWEEN_ACTIONS = 1500;

const UTIL_OPTS = {
  colors: true,
  maxArrayLength: 20,
  breakLength: 1000,
};
const UTIL_OPTS_PRETTY = {
  colors: true,
  compact: false,
  depth: 4,
  maxArrayLength: 50,
};

function initHSE() {
  const opts = {
    key: commander.key || Keys.hueBridge.key,
    address: commander.address || '192.168.86.206',
    verbose: commander.verbose,
    secure: !commander.insecure,
    trial: commander.trial,
  };
  hseLib.init(opts);
}

commander
  .version('0.8.7')
  .option('-a, --address <address>', 'Address to use')
  .option('-k, --key <key>', 'Hue Key')
  .option('-i, --insecure', 'Insecure, use HTTP only')
  .option('-v, --verbose', 'Verbose output')
  .option('-t, --trial', 'Trial only, don\'t make requests.')
  .option('-r, --recipeFile <filename>', 'Read [recipes.json]', 'recipes.json');


commander
  .command('list')
  .description('Lists all of the current scenes')
  .action(() => {
    initHSE();
    hseLib.listScenes().then((scenes) => {
      const keys = Object.keys(scenes);
      keys.forEach(function(key) {
        const scene = scenes[key];
        const k = chalk.cyan(key.padEnd(16, ' '));
        let appdata = ''.padEnd(14, ' ');
        if (scene.appdata && scene.appdata.data) {
          appdata = chalk.magenta(scene.appdata.data.padEnd(14, ' '));
        }
        const name = scene.name;
        let version = chalk.dim(`v${scene.version}`);
        if (scene.version < 2) {
          version = chalk.red(`v${scene.version}`);
        }
        console.log(k, appdata, name, version);
      });
    });
  });

commander
  .command('get <sceneID> [filename]')
  .description('Gets the details of the specified scene.')
  .action((sceneID, filename) => {
    initHSE();
    hseLib.getScene(sceneID).then((scene) => {
      console.log(util.inspect(scene, UTIL_OPTS_PRETTY));
      if (filename) {
        saveScene(sceneID, scene, filename);
      }
    });
  });

commander
  .command('activate <sceneID>')
  .description('Activates the specified scene.')
  .action((sceneID) => {
    initHSE();
    hseLib.activateScene(sceneID).then((results) => {
      hseLib.printResults(results);
    });
  });

commander
  .command('rename <sceneID> <name>')
  .description('Renames a scene.')
  .action((sceneID, sceneName) => {
    initHSE();
    hseLib.renameScene(sceneID, sceneName).then((results) => {
      hseLib.printResults(results);
    });
  });

commander
  .command('delete <sceneID>')
  .description('Delete an existing scene.')
  .action((sceneID) => {
    initHSE();
    hseLib.deleteScene(sceneID).then((results) => {
      hseLib.printResults(results);
    });
  });

commander
  .command('set <filename>')
  .description('Sets all lights in a scene definition file to their settings.')
  .action((filename) => {
    initHSE();
    makeScenes([filename]);
  });

commander
  .command('save <filename>')
  .description('Sets all the lights in file and saves scene to Hub.')
  .action((filename) => {
    initHSE();
    makeScenes([filename], true, false);
  });

commander
  .command('saveFolder <folder>')
  .description('Set & save scenes from all files in folder.')
  .action((folder) => {
    initHSE();
    const files = glob.find('*.json', {prefixBase: true, srcBase: folder});
    makeScenes(files, true, true);
  });

commander
  .command('backup <folder>')
  .description('Saves all scenes to individual files in the specified folder.')
  .action((folder) => {
    initHSE();
    hseLib.listScenes().then((scenes) => {
      const keys = Object.keys(scenes);
      backupScenes(keys, folder);
    });
  });

commander
  .command('recipes')
  .description('Lists all of the possible recipes.')
  .action(() => {
    const recipes = hseLib.getRecipes();
    const keys = Object.keys(recipes);
    keys.forEach(function(key) {
      const k = chalk.cyan(key.padEnd(24, ' '));
      console.log(k, util.inspect(recipes[key].hue, UTIL_OPTS));
    });
  });

// commander
//   .command('save <sceneID> <filename>')
//   .description('Saves scene details to file.')
//   .action((sceneID, filename) => {
//     initHSE();
//     backupScene(sceneID, filename).then((result) => {
//       console.log(util.inspect(result, UTIL_OPTS_PRETTY));
//     });
//   });

function allOffAndWait() {
  return hseLib.allOff().then(() => {
    console.log(' Waiting for lights to catch up...');
    return hseLib.wait(DELAY_BETWEEN_ACTIONS);
  });
}

async function backupScenes(scenes, folder) {
  for (let i = 0; i < scenes.length; i++) {
    if (i > 0) {
      await hseLib.wait(DELAY_BETWEEN_REQUESTS);
    }
    const sceneID = scenes[i];
    const filename = path.join(folder, `${sceneID}.json`);
    const sceneObj = await hseLib.getScene(sceneID);
    saveScene(sceneObj, filename);
    // backupScene(sceneID, filename);
  }
}

// async function backupScene(sceneID, filename) {
//   const scene = await hseLib.getScene(sceneID);
//   const results = {
//     sceneName: scene.name,
//     sceneId: sceneID,
//     sceneData: scene.appdata,
//     sceneVersion: scene.version,
//   };
//   if (scene.appdata && scene.appdata.data) {
//     const matches = scene.appdata.data.match(RE_ROOM_ID);
//     if (matches && matches[1]) {
//       results.room = {id: parseInt(matches[1])};
//     }
//   }
//   results.lights = [];
//   Object.keys(scene.lightstates).forEach((lightId) => {
//     const lightState = scene.lightstates[lightId];
//     results.lights.push({
//       lightId: parseInt(lightId),
//       command: lightState,
//     });
//   });
//   let cSceneID = chalk.cyan(sceneID);
//   if (scene.version < 2) {
//     cSceneID = chalk.red(sceneID);
//   }
//   const cFilename = chalk.cyan(filename);
//   console.log(`Saved ${cSceneID} to ${cFilename}`);
//   hseLib.saveJSONFile(filename, results);
//   return results;
// }

function saveScene(sceneID, hueSceneObj, filename) {
  const results = {
    sceneName: hueSceneObj.name,
    sceneId: sceneID,
    sceneData: hueSceneObj.appdata,
    sceneVersion: hueSceneObj.version,
  };
  if (hueSceneObj.appdata && hueSceneObj.appdata.data) {
    let matches = hueSceneObj.appdata.data.match(RE_ROOM_ID);
    if (matches && matches[1]) {
      results.roomId = parseInt(matches[1]);
    }
    matches = hueSceneObj.appdata.data.match(RE_SCENE_TYPE);
    if (matches && matches[1]) {
      results.sceneType = parseInt(matches[1]);
    }
  }
  results.lights = [];
  Object.keys(hueSceneObj.lightstates).forEach((lightId) => {
    const lightState = hueSceneObj.lightstates[lightId];
    results.lights.push({
      lightId: parseInt(lightId),
      command: lightState,
    });
  });
  let cSceneID = chalk.cyan(sceneID);
  if (hueSceneObj.version < 2) {
    cSceneID = chalk.red(sceneID);
  }
  const cFilename = chalk.cyan(filename);
  console.log(`Saved ${cSceneID} to ${cFilename}`);
  hseLib.saveJSONFile(filename, results);
}

async function setScene(sceneObj) {
  let lightList = {};
  console.log('setScene', chalk.cyan(sceneObj.sceneName));
  if (sceneObj.scenes) {
    for (let i = 0; i < sceneObj.scenes.length; i++) {
      const filename = sceneObj.scenes[i];
      const subSceneObj = hseLib.readJSONFile(filename);
      const lights = await setScene(subSceneObj);
      lightList = Object.assign(lightList, lights);
      await hseLib.wait(DELAY_BETWEEN_REQUESTS);
    }
  }
  if (sceneObj.lights) {
    let hasErrors = false;
    for (let i = 0; i < sceneObj.lights.length; i++) {
      const light = sceneObj.lights[i];
      const r = await hseLib.setLight(light);
      if (hseLib.printResults(r, false)) {
        hasErrors = true;
      }
      await hseLib.wait(DELAY_BETWEEN_REQUESTS);
      lightList[light.lightId] = true;
    }
    if (hasErrors) {
      throw new Error('Unable to set lights.');
    }
    const check = chalk.green('âœ”');
    const numLights = chalk.cyan(sceneObj.lights.length);
    const delay = DELAY_BETWEEN_EXTRA * sceneObj.lights.length;
    const msg = `${check} Set ${numLights} lights, waiting ${delay}ms`;
    console.log(' ', msg);
    await hseLib.wait(delay);
  }
  return lightList;
}

async function makeScenes(files, save, startOff) {
  for (let i = 0; i < files.length; i++) {
    const filename = files[i];
    console.log('Reading: ', chalk.cyan(filename));
    const sceneObj = hseLib.readJSONFile(filename);
    if (startOff) {
      await allOffAndWait();
      await hseLib.wait(DELAY_BETWEEN_ACTIONS);
    }
    const lightList = await setScene(sceneObj);
    const lights = Object.keys(lightList);
    if (save) {
      await hseLib.wait(DELAY_BETWEEN_ACTIONS / 2);
      if (sceneObj.sceneId) {
        const results = await hseLib.updateScene(sceneObj, lights);
        hseLib.printResults(results, true);
      } else {
        const results = await hseLib.createScene(sceneObj, lights);
        if (results && results[0] && results[0].success) {
          sceneObj.sceneId = results[0].success.id;
          hseLib.saveJSONFile(filename, sceneObj);
        }
        hseLib.printResults(results, true);
      }
    }
    if (i + 1 < files.length) {
      await hseLib.wait(DELAY_BETWEEN_ACTIONS);
    }
  }
}

commander.parse(process.argv);
if (commander.args.length === 0) {
  commander.help();
}


process.on('unhandledRejection', (reason, p) => {
  console.log('An unhandled promise rejection occured.', reason);
});
